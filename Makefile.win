#Telepresence Makefile

#Variables
VPATH=$(wildcard */) ; lib/jsoncpp/jsoncpp
CXX=g++
AR=ar rsc
CFLAGS=-std=c++11 -ffunction-sections -fdata-sections -Wl,--gc-sections -I. -Ilib/jsoncpp
#NOTE: -fPIC is enabled by default
LFLAGS=
SHARED=-fPIC -shared
LIBS=-ldl
OBJS=jsoncpp.o telepresence.o server.o client.o robot.o udpsocket.o serial.o watchdog.o ratelimit.o dummyJoystick.o controlFile.o dummyDevice.o #FIXME: joystick.o, parallax.o, pololu.o, arduino.o currently removed for windows builds
#NOTE: Raspi-specific objects and build steps removed for windows builds
ROBOTS=dummyRobot.o basicRobot.o #NOTE: parallaxRobot.o, pololuRobot.o, arduinoRobot.o raspiRobot.o currently removed for windows builds
BUILDOBJS=$(addprefix build/, $(OBJS))
BUILDROBOTS=$(addprefix build/, $(ROBOTS))


#Build everything
.PHONY: all
all: libjsoncpp bin/telepresence bin/dummy.so
#NOTE: bin/pololu.so, bin/parallax.so, bin/raspi.so currently removed for windows builds


#Build libjsoncpp from source
libjsoncpp:
	git clone https://github.com/open-source-parsers/jsoncpp.git lib/jsoncpp
	cd lib/jsoncpp; git reset --hard d84702c #1.6.5
	cd lib/jsoncpp; python amalgamate.py
	cd lib/jsoncpp/dist; sed -i 's/#define snprintf std::snprintf//' jsoncpp.cpp	#Fix issues in https://github.com/open-source-parsers/jsoncpp/commit/9dd77dc0efeb3a89311c49d64e6761095c629e1e again
	cd lib/jsoncpp; cp -r dist/ jsoncpp/


#Load dependency rules
-include $(BUILDOBJS:.o=.d)
-include $(BUILDROBOTS:.o=.d)

#Create folder for intermediate build files
build: | libjsoncpp
	@echo "Building object files..."
	mkdir -p build

#Generic compilation rule
build/%.o: %.cpp | build
	$(CXX) -c -o $@ $< $(CFLAGS) -MMD

#Basic robot compilation rules
#build/parallaxRobot.o: basicRobot.cpp | build
#	$(CXX) -c -o $@ $< $(CFLAGS) -DPARALLAX -MMD

#build/pololuRobot.o: basicRobot.cpp | build
#	$(CXX) -c -o $@ $< $(CFLAGS) -DPOLOLU -MMD

#build/arduinoRobot.o: basicRobot.cpp | build
#	$(CXX) -c -o $@ $< $(CFLAGS) -DARDUINO -MMD

#Build archive of robot-independent files
build/telepresence.a: $(BUILDOBJS) | build
	$(AR) $@ $(BUILDOBJS)


#Create folder for output binaries
bin:
	mkdir -p bin

#Build main binary
bin/telepresence: build/telepresence.a build/dummyRobot.o | bin
	@echo "Building telepresence binary..."
	$(CXX) -o $@ $^ $(LIBS)

#Build output module shared libraries
bin/dummy.so: build/basicRobot.o build/telepresence.a | bin
	@echo "Building dummy output module..."
	$(CXX) $(SHARED) -o $@ $^ $(LIBS)

#bin/parallax.so: build/parallaxRobot.o build/telepresence.a | bin
#	@echo "Building parallax output module..."
#	$(CXX) $(SHARED) -o $@ $^ $(LIBS)

#bin/pololu.so: build/pololuRobot.o build/telepresence.a | bin
#	@echo "Building pololu output module..."
#	$(CXX) $(SHARED) -o $@ $^ $(LIBS)

#bin/arduino.so: build/arduinoRobot.o build/telepresence.a | bin
#	@echo "Building arduino output module..."
#	$(CXX) $(SHARED) -o $@ $^ $(LIBS)


#Clean up old build files
.PHONY: clean
clean:
	@echo "Cleaning up old build files..."
	rm -rf build/ bin/ lib/jsoncpp/
